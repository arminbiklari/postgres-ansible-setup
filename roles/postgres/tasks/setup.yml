---
- name: Set PostgreSQL environment variables.
  ansible.builtin.template:
    src: postgres.sh.j2
    dest: /etc/profile.d/postgres.sh
    mode: 0644
  notify: restart postgresql

- name: Ensure PostgreSQL data directory exists.
  ansible.builtin.file:
    path: "{{ postgresql_data_dir }}"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    state: directory
    mode: 0700

- name: Check if PostgreSQL database is initialized.
  ansible.builtin.stat:
    path: "{{ postgresql_data_dir }}/PG_VERSION"
  register: pgdata_dir_version

- name: Ensure PostgreSQL database is initialized.
  ansible.builtin.command: "{{ postgresql_bin_path }}/initdb -D {{ postgresql_data_dir }}"
  when: not pgdata_dir_version.stat.exists
  become: true
  become_user: "{{ postgresql_user }}"
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  vars:
    ansible_ssh_pipelining: true

- name: Ensure PostgreSQL log directory exists.
  ansible.builtin.file:
    path: "{{ postgresql_effective_log_dir }}"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    state: directory
    mode: 0700
- name: Configure global settings.
  ansible.builtin.lineinfile:
    dest: "{{ postgresql_config_path }}/postgresql.conf"
    regexp: "^#?{{ item.option }}.+$"
    line: "{{ item.option }} = '{{ item.value }}'"
    state: "{{ item.state | default('present') }}"
    mode: 0644
  with_items: "{{ postgresql_global_config_options }}"
  notify: restart postgresql

- name: Configure host based authentication (if entries are configured).
  ansible.builtin.template:
    src: "pg_hba.conf.j2"
    dest: "{{ postgresql_config_path }}/pg_hba.conf"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: 0600
  notify: restart postgresql
  when: postgresql_hba_entries | length > 0

- name: Ensure PostgreSQL unix socket dirs exist.
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: "{{ postgresql_unix_socket_directories_mode }}"
  with_items: "{{ postgresql_unix_socket_directories }}"

- name: Set PostgreSQL root user password
  become: yes
  become_user: postgres
  ansible.builtin.command: |
    psql -c "ALTER USER {{ postgres_root_user }} WITH PASSWORD '{{ postgres_root_password }}';"
  when: postgres_root_password is defined
  register: postgres_connection_test
  ignore_errors: yes

- name: Fail task if PostgreSQL connection test failed
  ansible.builtin.fail:
    msg: "PostgreSQL connection test failed. Error: {{ postgres_connection_test.stderr }}"
  when: postgres_connection_test.rc != 0

- name: Trigger handler if PostgreSQL connection test succeeds
  ansible.builtin.meta: flush_handlers
  when: postgres_connection_test.rc == 0
